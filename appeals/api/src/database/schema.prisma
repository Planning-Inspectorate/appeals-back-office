generator client {
  provider = "prisma-client-js"
  output   = "../server/utils/db-client"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

/// Appeal model
/// Contains information of an appeal managed in the Back-Office.
model Appeal {
  id                    Int                  @id @default(autoincrement())
  reference             String               @unique
  submissionId          String?
  appealTimetable       AppealTimetable?
  appealStatus          AppealStatus[]
  appealType            AppealType?          @relation(fields: [appealTypeId], references: [id])
  appealTypeId          Int?
  procedureType         ProcedureType?       @relation(fields: [procedureTypeId], references: [id])
  procedureTypeId       Int?
  address               Address?             @relation(fields: [addressId], references: [id])
  addressId             Int?
  neighbouringSites     NeighbouringSite[]
  lpa                   LPA                  @relation(fields: [lpaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lpaId                 Int
  applicationReference  String?
  caseCreatedDate       DateTime             @default(now())
  caseUpdatedDate       DateTime             @default(now())
  caseValidDate         DateTime?
  caseExtensionDate     DateTime?
  caseStartedDate       DateTime?
  casePublishedDate     DateTime?
  caseCompletedDate     DateTime?
  withdrawalRequestDate DateTime?
  caseResubmittedTypeId Int?
  caseTransferredId     String?
  eiaScreeningRequired  Boolean?
  specialisms           AppealSpecialism[]
  allocation            AppealAllocation?
  allocationId          Int?
  appellant             ServiceUser?         @relation("appellant", fields: [appellantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appellantId           Int?
  agent                 ServiceUser?         @relation("agent", fields: [agentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  agentId               Int?
  caseOfficer           User?                @relation("caseOfficer", fields: [caseOfficerUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  caseOfficerUserId     Int?
  inspector             User?                @relation("inspector", fields: [inspectorUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inspectorUserId       Int?
  appellantCase         AppellantCase?
  lpaQuestionnaire      LPAQuestionnaire?
  siteVisit             SiteVisit?
  inspectorDecision     InspectorDecision?
  folders               Folder[]
  documents             Document[]
  auditTrail            AuditTrail[]
  parentAppeals         AppealRelationship[] @relation("childAppeal")
  childAppeals          AppealRelationship[] @relation("parentAppeal")
  representations       Representation[]
  caseNotes             CaseNote[]
}

/// AppealRelationship model
/// Stores case relationships, where at least one of the cases is on the beta system.
/// Both linked and related appeals are stored here.
/// Related appeals ignore the parent / child relationship.
model AppealRelationship {
  id                 Int      @id @default(autoincrement())
  type               String   @default("linked") // linked | related
  parentRef          String
  childRef           String
  parent             Appeal?  @relation("parentAppeal", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId           Int?
  child              Appeal?  @relation("childAppeal", fields: [childId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childId            Int?
  externalSource     Boolean?
  externalAppealType String?
  externalId         String?
  linkingDate        DateTime @default(now())
}

/// AppealType model
/// Lookup table for types of appeals processes, and appeal types such as D (Householder) and W (S78).
model AppealType {
  id          Int      @id @default(autoincrement())
  type        String   @unique
  key         String   @unique
  processCode String?
  enabled     Boolean?
  Appeal      Appeal[]
}

/// AppealTimetable model
/// Contains deadlines for appeal stages.
model AppealTimetable {
  id                        Int       @id @default(autoincrement())
  appeal                    Appeal    @relation(fields: [appealId], references: [id])
  appealId                  Int       @unique
  caseResubmissionDueDate   DateTime?
  lpaQuestionnaireDueDate   DateTime?
  ipCommentsDueDate         DateTime?
  appellantStatementDueDate DateTime?
  lpaStatementDueDate       DateTime?
  finalCommentsDueDate      DateTime?
  s106ObligationDueDate     DateTime?
  issueDeterminationDate    DateTime?
}

/// AppealStatus model
/// Stores the current and past statuses of appeals.
/// Uses the `valid` value to mark statuses as current if true and past if false.
/// An appeal might have multiple valid statuses depending on the type of Appeal
/// which can be built up into a compound status using the `subStateMachineName`
/// `compoundStateName` values.
model AppealStatus {
  id                  Int      @id @default(autoincrement())
  status              String   @default("assign_case_officer")
  createdAt           DateTime @default(now())
  valid               Boolean  @default(true)
  appeal              Appeal   @relation(fields: [appealId], references: [id])
  appealId            Int
  subStateMachineName String?
  compoundStateName   String?
}

/// AppealAllocation model
/// Stores the selected allocation for a single appeal.
model AppealAllocation {
  id       Int     @id @default(autoincrement())
  appeal   Appeal? @relation(fields: [appealId], references: [id])
  appealId Int     @unique
  level    String
  band     Int
}

/// AppealSpecialism model
/// Stores the selected specialisms for a single appeal.
model AppealSpecialism {
  id           Int        @id @default(autoincrement())
  specialism   Specialism @relation(fields: [specialismId], references: [id])
  specialismId Int
  appeal       Appeal     @relation(fields: [appealId], references: [id])
  appealId     Int
}

/// Specialism model
/// Stores all the possible specialisms for a single appeal.
model Specialism {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  appealSpecialisms AppealSpecialism[]
}

/// ProcedureType model
/// Stores all the possible case procedure types.
model ProcedureType {
  id     Int      @id @default(autoincrement())
  key    String   @unique
  name   String   @unique
  appeal Appeal[]
}

/// LPA model
/// Contains information about the Local Planning Authority in the appeal site.
model LPA {
  id              Int              @id @default(autoincrement())
  name            String
  lpaCode         String           @unique
  email           String?
  appeals         Appeal[]
  representations Representation[] @relation("lpaRepresentation")
}

/// ServiceUser model
/// Contains data of people who submitted appeals (agents and appellants).
model ServiceUser {
  id                      Int              @id @default(autoincrement())
  organisationName        String?
  salutation              String?
  firstName               String?
  middleName              String?
  lastName                String?
  email                   String?
  website                 String?
  phoneNumber             String?
  address                 Address?         @relation(fields: [addressId], references: [id])
  addressId               Int?
  appeals                 Appeal[]         @relation("appellant")
  appealsOnBehalf         Appeal[]         @relation("agent")
  representations         Representation[] @relation("represented")
  representationsOnBehalf Representation[] @relation("representative")
}

/// User model
/// Contains information on Back-Office users (PINS employees).
model User {
  id            Int          @id @default(autoincrement())
  azureAdUserId String?      @unique
  caseOfficer   Appeal[]     @relation("caseOfficer")
  inspector     Appeal[]     @relation("inspector")
  auditTrail    AuditTrail[]
  caseNotes     CaseNote[]
}

/// Address model
/// Contains information on addresses.
model Address {
  id                Int                @id @default(autoincrement())
  addressLine1      String?
  addressLine2      String?
  postcode          String?
  addressCounty     String?
  addressTown       String?
  addressCountry    String?            @default("United Kingdom")
  Appeal            Appeal[]
  ServiceUser       ServiceUser[]
  NeighbouringSites NeighbouringSite[]
}

/// NeighbouringSite model
/// Contains information on neighbouring sites.
model NeighbouringSite {
  id        Int     @id @default(autoincrement())
  appeal    Appeal  @relation(fields: [appealId], references: [id])
  appealId  Int
  address   Address @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  addressId Int
  source    String  @default("back-office")

  @@unique([appealId, addressId])
}

/// AppellantCase model
/// Contains information from the questionnaire that the appellant.
/// would have filled out when submitting the appeal.
model AppellantCase {
  id                                     Int                                      @id @default(autoincrement())
  appeal                                 Appeal                                   @relation(fields: [appealId], references: [id])
  appealId                               Int                                      @unique
  appellantCaseIncompleteReasonsSelected AppellantCaseIncompleteReasonsSelected[]
  appellantCaseInvalidReasonsSelected    AppellantCaseInvalidReasonsSelected[]
  appellantCaseValidationOutcome         AppellantCaseValidationOutcome?          @relation(fields: [appellantCaseValidationOutcomeId], references: [id])
  appellantCaseValidationOutcomeId       Int?
  applicationDate                        DateTime                                 @default(now())
  applicationDecision                    String                                   @default("refused")
  applicationDecisionDate                DateTime?
  caseSubmittedDate                      DateTime                                 @default(now())
  caseSubmissionDueDate                  DateTime?
  siteAccessDetails                      String?
  siteSafetyDetails                      String?
  siteAreaSquareMetres                   Decimal?
  floorSpaceSquareMetres                 Decimal?
  ownsAllLand                            Boolean?
  ownsSomeLand                           Boolean?
  knowsOtherOwners                       KnowledgeOfOtherLandowners?              @relation("knowsOtherOwners", fields: [knowsOtherOwnersId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  knowsOtherOwnersId                     Int?
  knowsAllOwners                         KnowledgeOfOtherLandowners?              @relation("knowsAllOwners", fields: [knowsAllOwnersId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  knowsAllOwnersId                       Int?
  hasAdvertisedAppeal                    Boolean?
  appellantCostsAppliedFor               Boolean?
  originalDevelopmentDescription         String?
  changedDevelopmentDescription          Boolean?
  ownersInformed                         Boolean?
  enforcementNotice                      Boolean?
  isGreenBelt                            Boolean?

  // S78 fields
  agriculturalHolding                      Boolean?
  tenantAgriculturalHolding                Boolean?
  otherTenantsAgriculturalHolding          Boolean?
  informedTenantsAgriculturalHolding       Boolean?
  appellantProcedurePreference             String?
  appellantProcedurePreferenceDetails      String?
  appellantProcedurePreferenceDuration     Int?
  appellantProcedurePreferenceWitnessCount Int?
  planningObligation                       Boolean?
  statusPlanningObligation                 String?
  siteViewableFromRoad                     Boolean?
  caseworkReason                           String?
  developmentType                          String?
  jurisdiction                             String?
  numberOfResidencesNetChange              Int?
  siteGridReferenceEasting                 String?
  siteGridReferenceNorthing                String?
  typeOfPlanningApplication                String?
  inquiryHowManyWitnesses                  Int?
}

/// AppellantCaseValidationOutcome model
/// Contains information on the result of an appellant case validation.
model AppellantCaseValidationOutcome {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  AppellantCase AppellantCase[]
}

/// AppellantCaseIncompleteReason model
/// Contains information on all possible resons to consider an appellant case incomplete.
model AppellantCaseIncompleteReason {
  id                                     Int                                      @id @default(autoincrement())
  name                                   String                                   @unique
  hasText                                Boolean                                  @default(false)
  appellantCaseIncompleteReasonsSelected AppellantCaseIncompleteReasonsSelected[]
}

/// AppellantCaseInvalidReason model
/// Contains information on all possible resons to consider an appellant case invalid.
model AppellantCaseInvalidReason {
  id                                  Int                                   @id @default(autoincrement())
  name                                String                                @unique
  hasText                             Boolean                               @default(false)
  appellantCaseInvalidReasonsSelected AppellantCaseInvalidReasonsSelected[]
}

/// AppellantCaseIncompleteReasonsSelected model
/// Contains information on the selected resons to consider an appellant case incomplete.
model AppellantCaseIncompleteReasonsSelected {
  appellantCaseIncompleteReason     AppellantCaseIncompleteReason       @relation(fields: [appellantCaseIncompleteReasonId], references: [id])
  appellantCaseIncompleteReasonId   Int
  appellantCase                     AppellantCase                       @relation(fields: [appellantCaseId], references: [id])
  appellantCaseId                   Int
  appellantCaseIncompleteReasonText AppellantCaseIncompleteReasonText[]

  @@id([appellantCaseIncompleteReasonId, appellantCaseId])
}

/// AppellantCaseInvalidReasonsSelected model
/// Contains information on the selected resons to consider an appellant case invalid.
model AppellantCaseInvalidReasonsSelected {
  appellantCaseInvalidReason     AppellantCaseInvalidReason       @relation(fields: [appellantCaseInvalidReasonId], references: [id])
  appellantCaseInvalidReasonId   Int
  appellantCase                  AppellantCase                    @relation(fields: [appellantCaseId], references: [id])
  appellantCaseId                Int
  appellantCaseInvalidReasonText AppellantCaseInvalidReasonText[]

  @@id([appellantCaseInvalidReasonId, appellantCaseId])
}

/// AppellantCaseIncompleteReasonText model
/// Contains information on custom reasons to consider an appellant case incomplete.
model AppellantCaseIncompleteReasonText {
  id                                     Int                                    @id @default(autoincrement())
  text                                   String
  appellantCaseIncompleteReasonsSelected AppellantCaseIncompleteReasonsSelected @relation(fields: [appellantCaseIncompleteReasonId, appellantCaseId], references: [appellantCaseIncompleteReasonId, appellantCaseId])
  appellantCaseIncompleteReasonId        Int
  appellantCaseId                        Int
}

/// AppellantCaseInvalidReasonText model
/// Contains information on custom reasons to consider an appellant case invalid.
model AppellantCaseInvalidReasonText {
  id                                  Int                                 @id @default(autoincrement())
  text                                String
  appellantCaseInvalidReasonsSelected AppellantCaseInvalidReasonsSelected @relation(fields: [appellantCaseInvalidReasonId, appellantCaseId], references: [appellantCaseInvalidReasonId, appellantCaseId])
  appellantCaseInvalidReasonId        Int
  appellantCaseId                     Int
}

/// KnowledgeOfOtherLandowners model
/// Contains possible answers to 'knows all owners' question.
model KnowledgeOfOtherLandowners {
  id              Int             @id @default(autoincrement())
  key             String          @unique
  name            String          @unique
  caseOtherOwners AppellantCase[] @relation("knowsOtherOwners")
  caseAllOwners   AppellantCase[] @relation("knowsAllOwners")
}

/// LPAQuestionnaire model
/// Contains responses from Local Planning Authority (LPA).
/// regarding a specific appeal.
model LPAQuestionnaire {
  id                                        Int                                         @id @default(autoincrement())
  appeal                                    Appeal                                      @relation(fields: [appealId], references: [id])
  appealId                                  Int                                         @unique
  lpaQuestionnaireIncompleteReasonsSelected LPAQuestionnaireIncompleteReasonsSelected[]
  lpaQuestionnaireValidationOutcome         LPAQuestionnaireValidationOutcome?          @relation(fields: [lpaQuestionnaireValidationOutcomeId], references: [id])
  lpaQuestionnaireValidationOutcomeId       Int?
  lpaNotificationMethods                    LPANotificationMethodsSelected[]
  lpaqCreatedDate                           DateTime                                    @default(now())
  lpaQuestionnaireSubmittedDate             DateTime?
  lpaStatement                              String?
  newConditionDetails                       String?
  siteAccessDetails                         String?
  siteSafetyDetails                         String?
  listedBuildingDetails                     ListedBuildingSelected[]
  isCorrectAppealType                       Boolean?
  inConservationArea                        Boolean?
  lpaCostsAppliedFor                        Boolean?
  isGreenBelt                               Boolean?

  // S78 fields
  affectsScheduledMonument            Boolean?
  isAonbNationalLandscape             Boolean?
  isGypsyOrTravellerSite              Boolean?
  isPublicRightOfWay                  Boolean?
  eiaEnvironmentalImpactSchedule      String?
  eiaDevelopmentDescription           String?
  eiaSensitiveAreaDetails             String?
  eiaColumnTwoThreshold               Boolean?
  eiaScreeningOpinion                 Boolean?
  eiaRequiresEnvironmentalStatement   Boolean?
  eiaCompletedEnvironmentalStatement  Boolean?
  consultedBodiesDetails              String?
  hasProtectedSpecies                 Boolean?
  hasStatutoryConsultees              Boolean?
  hasInfrastructureLevy               Boolean?
  hasTreePreservationOrder            Boolean?
  hasConsultationResponses            Boolean?
  hasEmergingPlan                     Boolean?
  hasSupplementaryPlanningDocs        Boolean?
  isInfrastructureLevyFormallyAdopted Boolean?
  infrastructureLevyAdoptedDate       DateTime?
  infrastructureLevyExpectedDate      DateTime?
  lpaProcedurePreference              String?
  lpaProcedurePreferenceDetails       String?
  lpaProcedurePreferenceDuration      Int?
  lpaFinalCommentDetails              String?
  lpaAddedWitnesses                   Boolean?
  siteWithinSSSI                      Boolean?
  reasonForNeighbourVisits            String?
  importantInformation                String?
  redeterminedIndicator               String?
  dateCostsReportDespatched           DateTime?
  dateNotRecoveredOrDerecovered       DateTime?
  dateRecovered                       DateTime?
  originalCaseDecisionDate            DateTime?
  targetDate                          DateTime?
  siteNoticesSentDate                 DateTime?
  designatedSiteNameCustom            String?
  designatedSiteNames                 DesignatedSiteSelected[]
}

/// LPAQuestionnaireValidationOutcome model
/// Contains information on the result of an LPA response validation.
model LPAQuestionnaireValidationOutcome {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  lpaQuestionnaire LPAQuestionnaire[]
}

/// LPAQuestionnaireIncompleteReason model
/// Contains information on all possible resons to consider an LPA response incomplete.
model LPAQuestionnaireIncompleteReason {
  id                                        Int                                         @id @default(autoincrement())
  name                                      String                                      @unique
  hasText                                   Boolean                                     @default(false)
  lpaQuestionnaireIncompleteReasonsSelected LPAQuestionnaireIncompleteReasonsSelected[]
}

/// LPAQuestionnaireIncompleteReasonsSelected model
/// Contains information on the selected resons to consider an LPA response incomplete.
model LPAQuestionnaireIncompleteReasonsSelected {
  lpaQuestionnaireIncompleteReason     LPAQuestionnaireIncompleteReason       @relation(fields: [lpaQuestionnaireIncompleteReasonId], references: [id])
  lpaQuestionnaireIncompleteReasonId   Int
  lpaQuestionnaire                     LPAQuestionnaire                       @relation(fields: [lpaQuestionnaireId], references: [id])
  lpaQuestionnaireId                   Int
  lpaQuestionnaireIncompleteReasonText LPAQuestionnaireIncompleteReasonText[]

  @@id([lpaQuestionnaireIncompleteReasonId, lpaQuestionnaireId])
}

/// LPAQuestionnaireIncompleteReasonText model
/// Contains information on custom reasons to consider an LPA response incomplete.
model LPAQuestionnaireIncompleteReasonText {
  id                                        Int                                       @id @default(autoincrement())
  text                                      String
  lPAQuestionnaireIncompleteReasonsSelected LPAQuestionnaireIncompleteReasonsSelected @relation(fields: [lpaQuestionnaireIncompleteReasonId, lpaQuestionnaireId], references: [lpaQuestionnaireIncompleteReasonId, lpaQuestionnaireId])
  lpaQuestionnaireIncompleteReasonId        Int
  lpaQuestionnaireId                        Int
}

/// ListedBuildingDetails model
/// Contains information on listed building entries affected by an appeal.
/// Reported by LPA.
model ListedBuildingSelected {
  id                    Int               @id @default(autoincrement())
  lpaQuestionnaireId    Int?
  listEntry             String?
  affectsListedBuilding Boolean           @default(true)
  lpaQuestionnaire      LPAQuestionnaire? @relation(fields: [lpaQuestionnaireId], references: [id])
}

/// LPANotificationMethods model
/// Contains information on all possible notification methods.
model LPANotificationMethods {
  id                Int                              @id @default(autoincrement())
  key               String                           @unique
  name              String                           @unique
  lpaQuestionnaires LPANotificationMethodsSelected[] // A press advert | A site notice | Letter/email to interested parties
}

/// LPANotificationMethodsSelected model
/// Contains information on selected notification methods.
model LPANotificationMethodsSelected {
  lpaNotificationMethod LPANotificationMethods @relation(fields: [notificationMethodId], references: [id])
  notificationMethodId  Int
  lpaQuestionnaire      LPAQuestionnaire       @relation(fields: [lpaQuestionnaireId], references: [id])
  lpaQuestionnaireId    Int

  @@id([notificationMethodId, lpaQuestionnaireId])
}

/// DesignatedSite model
/// Contains information on all possible designated sites affecting the appeal.
model DesignatedSite {
  id                Int                      @id @default(autoincrement())
  key               String                   @unique
  name              String                   @unique
  lpaQuestionnaires DesignatedSiteSelected[]
}

/// DesignatedSiteSelected model
/// Contains information on the selected designated sites affecting the appeal.
model DesignatedSiteSelected {
  designatedSite     DesignatedSite   @relation(fields: [designatedSiteId], references: [id])
  designatedSiteId   Int
  lpaQuestionnaire   LPAQuestionnaire @relation(fields: [lpaQuestionnaireId], references: [id])
  lpaQuestionnaireId Int

  @@id([designatedSiteId, lpaQuestionnaireId])
}

/// SiteVisit model
/// Contains information on the scheduled site visit for an appeal.
model SiteVisit {
  id              Int            @id @default(autoincrement())
  appealId        Int            @unique
  siteVisitTypeId Int?
  visitDate       DateTime?
  visitStartTime  DateTime?
  visitEndTime    DateTime?
  appeal          Appeal         @relation(fields: [appealId], references: [id])
  siteVisitType   SiteVisitType? @relation(fields: [siteVisitTypeId], references: [id])
}

/// SiteVisitType model
/// Contains information on all possible types of site visit.
model SiteVisitType {
  id        Int         @id @default(autoincrement())
  key       String      @unique
  name      String      @unique
  siteVisit SiteVisit[]
}

/// InspectorDecision model
/// Contains decision made by an inspector on an appeal after a site visit.
model InspectorDecision {
  id                      Int       @id @default(autoincrement())
  appeal                  Appeal    @relation(fields: [appealId], references: [id])
  appealId                Int       @unique
  outcome                 String
  decisionLetterGuid      String?
  invalidDecisionReason   String?
  caseDecisionOutcomeDate DateTime?
}

/// Folder model
/// Represents a container for documents.
/// This exists to specify the structure with which documents are displayed
/// in the back office (not the front office).
/// The path contains the stage and document type, joined by a /
model Folder {
  id        Int        @id @default(autoincrement())
  path      String
  case      Appeal?    @relation(fields: [caseId], references: [id])
  caseId    Int
  documents Document[]

  @@unique([caseId, path])
}

/// Document model
/// Contains information about the documents that are saved against a case.
/// This model is a central space for each document which might have several
/// versions and can store shared metadata.
model Document {
  guid                  String                 @id @default(uuid())
  name                  String
  case                  Appeal                 @relation(fields: [caseId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  caseId                Int
  folder                Folder                 @relation(fields: [folderId], references: [id])
  folderId              Int
  createdAt             DateTime               @default(now())
  isDeleted             Boolean                @default(false)
  latestDocumentVersion DocumentVersion?       @relation("latestVersion", fields: [guid, latestVersionId], references: [documentGuid, version], onUpdate: NoAction, onDelete: NoAction)
  latestVersionId       Int?
  versions              DocumentVersion[]      @relation("versionHistory")
  versionAudit          DocumentVersionAudit[] @relation("audit")

  @@unique([name, folderId])
  @@unique([guid, latestVersionId])
}

/// DocumentVersion model
/// Stores information pertaining to each version of a document.
/// Versions are stored against the `version` value (starting with 1).
/// The physical location of these documents should be stored here.
model DocumentVersion {
  documentGuid         String
  version              Int
  lastModified         DateTime?
  documentType         String?
  published            Boolean                   @default(false)
  draft                Boolean                   @default(true)
  sourceSystem         String                    @default("back-office-appeals")
  virusCheckStatus     String                    @default("not_scanned")
  origin               String?
  originalFilename     String?
  fileName             String?
  description          String?
  owner                String?
  author               String?
  mime                 String?
  horizonDataID        String?
  fileMD5              String?
  size                 Int?
  stage                String?
  blobStorageContainer String?
  blobStoragePath      String?
  documentURI          String?
  dateCreated          DateTime?                 @default(now())
  datePublished        DateTime?
  dateReceived         DateTime?
  isDeleted            Boolean                   @default(false)
  isLateEntry          Boolean?
  redactionStatus      DocumentRedactionStatus?  @relation(fields: [redactionStatusId], references: [id])
  redactionStatusId    Int?
  document             Document?                 @relation("versionHistory", fields: [documentGuid], references: [guid])
  latestVersion        Document?                 @relation("latestVersion")
  representation       RepresentationAttachment? @relation("documentVersion")

  @@id([documentGuid, version])
  @@index([documentGuid], map: "documentGuid")
}

/// DocumentVersionAvScan model
/// Stores AV scan result against uploaded blobs.
model DocumentVersionAvScan {
  documentGuid  String
  version       Int
  avScanSuccess Boolean
  avScanDate    DateTime @default(now())

  @@id([documentGuid, version])
  @@index([documentGuid], map: "documentGuid")
}

/// DocumentVersionAudit model
/// Stores information pertaining to each version of a document.
/// Versions are stored against the `version` value (starting with 1).
/// The physical location of these documents should be stored here.
model DocumentVersionAudit {
  id           Int         @id @default(autoincrement())
  document     Document?   @relation("audit", fields: [documentGuid], references: [guid])
  documentGuid String
  version      Int
  auditTrail   AuditTrail? @relation("auditTrails", fields: [auditTrailId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  auditTrailId Int         @unique
  action       String
}

/// DocumentRedactionStatus model
/// Stores all the possible redaction statuses of a document.
model DocumentRedactionStatus {
  id        Int               @id @default(autoincrement())
  key       String            @unique
  name      String            @unique
  documents DocumentVersion[]
}

/// AuditTrail model
/// Stores an activity log against each appeal.
model AuditTrail {
  id       Int                   @id @default(autoincrement())
  appealId Int
  userId   Int
  loggedAt DateTime
  details  String
  appeal   Appeal                @relation(fields: [appealId], references: [id])
  user     User                  @relation(fields: [userId], references: [id])
  doc      DocumentVersionAudit? @relation("auditTrails")
}

/// Representation model
/// Stores exchange of comments and statements
model Representation {
  id                                     Int                                      @id @default(autoincrement())
  appeal                                 Appeal                                   @relation(fields: [appealId], references: [id])
  appealId                               Int
  representationType                     String
  dateCreated                            DateTime                                 @default(now())
  dateLastUpdated                        DateTime                                 @default(now())
  originalRepresentation                 String?                                  @db.NVarChar(Max)
  redactedRepresentation                 String?                                  @db.NVarChar(Max)
  represented                            ServiceUser?                             @relation("represented", fields: [representedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  representedId                          Int?
  representative                         ServiceUser?                             @relation("representative", fields: [representativeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  representativeId                       Int?
  lpa                                    LPA?                                     @relation("lpaRepresentation", fields: [lpaCode], references: [lpaCode], onDelete: NoAction, onUpdate: NoAction)
  lpaCode                                String?
  status                                 String                                   @default("awaiting_review")
  reviewer                               String?
  notes                                  String?
  attachments                            RepresentationAttachment[]
  siteVisitRequested                     Boolean                                  @default(false)
  source                                 String                                   @default("citizen")
  representationRejectionReasonsSelected RepresentationRejectionReasonsSelected[]
}

/// Representation model
/// Stores exchange of comments and statements
model RepresentationAttachment {
  documentVersion  DocumentVersion @relation("documentVersion", fields: [documentGuid, version], references: [documentGuid, version])
  documentGuid     String
  version          Int
  representation   Representation  @relation(fields: [representationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  representationId Int

  @@id([documentGuid, version])
}

/// RepresentationRejectionReason model
/// Contains all possible reasons to reject a comment.
model RepresentationRejectionReason {
  id                                     Int                                      @id @default(autoincrement())
  name                                   String
  hasText                                Boolean                                  @default(false)
  representationType                     String                                   @default("comment")
  representationRejectionReasonsSelected RepresentationRejectionReasonsSelected[]

  @@unique([name, representationType])
}

/// RepresentationRejectionReasonsSelected model
/// Contains information on selected reasons for rejecting a comment.
model RepresentationRejectionReasonsSelected {
  representationRejectionReason     RepresentationRejectionReason       @relation(fields: [representationRejectionReasonId], references: [id])
  representationRejectionReasonId   Int
  representation                    Representation                      @relation(fields: [representationId], references: [id])
  representationId                  Int
  representationRejectionReasonText RepresentationRejectionReasonText[]

  @@id([representationRejectionReasonId, representationId])
}

/// RepresentationRejectionReasonText model
/// Contains custom text for rejection reasons if 'Other' is selected.
model RepresentationRejectionReasonText {
  id                                     Int                                    @id @default(autoincrement())
  text                                   String
  representationRejectionReasonsSelected RepresentationRejectionReasonsSelected @relation(fields: [representationRejectionReasonId, representationId], references: [representationRejectionReasonId, representationId])
  representationRejectionReasonId        Int
  representationId                       Int
}

/// Comment model
/// Stores internal user comment (for internal use only)
model CaseNote {
  id        Int      @id @default(autoincrement())
  case      Appeal   @relation(fields: [caseId], references: [id])
  caseId    Int
  comment   String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  archived  Boolean  @default(false)
}
