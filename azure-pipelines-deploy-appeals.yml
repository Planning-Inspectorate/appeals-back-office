parameters:
  - name: deployAppealsAPI
    displayName: Deploy Appeals API
    type: boolean
    default: true
  - name: deployAppealsWeb
    displayName: Deploy Appeals Web
    type: boolean
    default: true
  - name: deployAppealsPDF
    displayName: Deploy Appeals PDF Generator
    type: boolean
    default: true
  - name: deployFunctionAppealsCasedataImport
    displayName: Deploy Function - Appeals Casedata Import
    type: boolean
    default: true
  - name: deployFunctionAppealsRefDataImport
    displayName: Deploy Function - Appeals Referencedata Import
    type: boolean
    default: true
  - name: deployFunctionAppealsDocProcessing
    displayName: Deploy Function - Appeals Document Processing
    type: boolean
    default: true
  - name: deployFunctionAppealsScheduledJobs
    displayName: Deploy Function - Appeals Scheduled Jobs
    type: boolean
    default: true
  - name: schemaMigration
    displayName: Run Database Migration
    type: boolean
    default: true
  - name: slotDeployment
    displayName: Deploy apps to slot
    type: boolean
    default: false

pr: none
trigger: none

resources:
  repositories:
    - repository: templates
      type: github
      endpoint: Planning-Inspectorate
      name: Planning-Inspectorate/common-pipeline-templates
      ref: refs/tags/release/3.24.0
  pipelines:
    - pipeline: build
      source: Build
      trigger:
        branches:
          include:
            - main

extends:
  template: stages/wrapper_cd.yml@templates
  parameters:
    variableGroupPrefix: 'cd'
    environments:
      - name: Dev
      - name: Test
        dependsOn:
          - Dev
      - name: Staging
        dependsOn:
          - Test
      - name: Training
        dependsOn:
          - Test
      - name: Prod
        dependsOn:
          - Training
    deploymentStages:
      - name: Deploy Appeals
        deploymentJobs:
          - name: Deploy Appeals API
            condition: eq(${{ parameters.deployAppealsAPI }}, true)
            steps:
              - checkout: self
              - ${{ if eq(parameters.schemaMigration, true) }}:
                # kv name is different in the training env (had to be shorter)
                - bash: |
                    if [[ $ENVIRONMENT == "training" ]]; then
                      echo "Name: pins-kv-appeals-bo-train (env: $ENVIRONMENT)"
                      echo "##vso[task.setvariable variable=kvName;]pins-kv-appeals-bo-train"
                    elif [[ $ENVIRONMENT == "staging" ]]; then
                      echo "Name: pins-kv-appeals-bo-stage (env: $ENVIRONMENT)"
                      echo "##vso[task.setvariable variable=kvName;]pins-kv-appeals-bo-stage"
                    else
                      echo "Name: pins-kv-appeals-bo-$ENVIRONMENT (env: $ENVIRONMENT)"
                      echo "##vso[task.setvariable variable=kvName;]pins-kv-appeals-bo-$ENVIRONMENT"
                    fi
                  displayName: Set KV name
                  env:
                    ENVIRONMENT: $(ENVIRONMENT)
                - template: ../steps/azure_get_secrets.yml
                  parameters:
                    keyVaultName: $(kvName)
                    secrets:
                      - name: appeals-bo-sql-admin-connection-string
                        variable: appeals-bo-sql-admin-connection-string
                - template: ../steps/node_script.yml
                  parameters:
                    nodeVersion: 22
                    environmentVariables:
                      DATABASE_URL: $(appeals-bo-sql-admin-connection-string)
                    script: npm run db:migrate:prod
                    workingDirectory: $(Build.Repository.LocalPath)/appeals/api
              - template: ../steps/azure_web_app_deploy_slot.yml
                parameters:
                  appName: pins-app-appeals-bo-api-$(ENVIRONMENT)
                  appResourceGroup: $(resourceGroup)
                  azurecrName: $(azurecrName)
                  repository: back-office/back-office-appeals-api
                  ${{ if eq(parameters.slotDeployment, true) }}:
                    slot: staging
                  ${{ else }}:
                    slot: default
              - script: |
                  if [[ ${{ parameters.slotDeployment }} == "True" ]]; then
                    echo "Verifying API Version on slot (using git hash $(resources.pipeline.build.sourceCommit))..."
                    bash ./packages/scripts/verify_commit_hash.sh "API" "https://pins-app-appeals-bo-api-$(ENVIRONMENT)-staging.azurewebsites.net/health" "$(resources.pipeline.build.sourceCommit)" 3
                  else
                    echo "Verifying API Version (using git hash $(resources.pipeline.build.sourceCommit))..."
                    bash ./packages/scripts/verify_commit_hash.sh "API" "https://pins-app-appeals-bo-api-$(ENVIRONMENT).azurewebsites.net/health" "$(resources.pipeline.build.sourceCommit)" 3
                  fi
                displayName: API Verify Version
                failOnStderr: true
                continueOnError: false
          - name: Deploy Appeals Web
            condition: eq(${{ parameters.deployAppealsWeb }}, true)
            steps:
              - checkout: self
              - template: ../steps/azure_web_app_deploy_slot.yml
                parameters:
                  appName: pins-app-appeals-bo-web-$(ENVIRONMENT)
                  appResourceGroup: $(resourceGroup)
                  azurecrName: $(azurecrName)
                  repository: back-office/appeals-web
                  ${{ if eq(parameters.slotDeployment, true) }}:
                      slot: staging
                  ${{ else }}:
                      slot: default
              - script: |
                  if [[ ${{ parameters.slotDeployment }} == "True" ]]; then
                    echo "Verifying Web Version on slot (using git hash $(resources.pipeline.build.sourceCommit))..."
                    bash ./packages/scripts/verify_commit_hash.sh "Web" "https://pins-app-appeals-bo-web-$(ENVIRONMENT)-staging.azurewebsites.net/health" "$(resources.pipeline.build.sourceCommit)" 3
                  else
                    echo "Verifying Web Version (using git hash $(resources.pipeline.build.sourceCommit))..."
                    bash ./packages/scripts/verify_commit_hash.sh "Web" "https://pins-app-appeals-bo-web-$(ENVIRONMENT).azurewebsites.net/health" "$(resources.pipeline.build.sourceCommit)" 3
                  fi
                displayName: Web Verify Version
                failOnStderr: true
                continueOnError: false
          - name: Deploy Appeals PDF Generator
            condition: eq(${{ parameters.deployAppealsPDF }}, true)
            steps:
              - checkout: self
              - template: ../steps/azure_web_app_deploy_slot.yml
                parameters:
                  appName: pins-app-appeals-bo-pdf-$(ENVIRONMENT)
                  appResourceGroup: $(resourceGroup)
                  azurecrName: $(azurecrName)
                  repository: back-office/back-office-appeals-pdf
                  ${{ if eq(parameters.slotDeployment, true) }}:
                      slot: staging
                  ${{ else }}:
                      slot: default
              - script: |
                  if [[ ${{ parameters.slotDeployment }} == "True" ]]; then
                    echo "Verifying PDF Version on slot (using git hash $(resources.pipeline.build.sourceCommit))..."
                    bash ./packages/scripts/verify_commit_hash.sh "PDF" "https://pins-app-appeals-bo-pdf-$(ENVIRONMENT)-staging.azurewebsites.net/health" "$(resources.pipeline.build.sourceCommit)" 3
                  else
                    echo "Verifying PDF Version (using git hash $(resources.pipeline.build.sourceCommit))..."
                    bash ./packages/scripts/verify_commit_hash.sh "PDF" "https://pins-app-appeals-bo-pdf-$(ENVIRONMENT).azurewebsites.net/health" "$(resources.pipeline.build.sourceCommit)" 3
                  fi
                displayName: PDF Verify Version
                failOnStderr: true
                continueOnError: false
          - name: Deploy Function - Appeals Casedata Import
            condition: eq(${{ parameters.deployFunctionAppealsCasedataImport }}, 'true')
            steps:
              - download: build
                artifact: function-appeals-casedata-import
                displayName: Download function-appeals-casedata-import
              - template: ../steps/function_app_deploy.yml
                parameters:
                  appName: pins-func-appeals-bo-casedata-import-$(ENVIRONMENT)
                  resourceGroup: $(resourceGroup)
                  workingDirectory: $(Pipeline.Workspace)/build/function-appeals-casedata-import
          - name: Deploy Function - Appeals Refdata Import
            condition: eq(${{ parameters.deployFunctionAppealsRefDataImport }}, 'true')
            steps:
              - download: build
                artifact: function-appeals-refdata-import
                displayName: Download function-appeals-refdata-import
              - template: ../steps/function_app_deploy.yml
                parameters:
                  appName: pins-func-appeals-bo-refdata-import-$(ENVIRONMENT)
                  resourceGroup: $(resourceGroup)
                  workingDirectory: $(Pipeline.Workspace)/build/function-appeals-refdata-import
          - name: Deploy Function - Appeals Document Processing
            condition: eq(${{ parameters.deployFunctionAppealsDocProcessing }}, 'true')
            steps:
              - download: build
                artifact: function-appeals-document-processing
                displayName: Download function-appeals-document-processing
              - template: ../steps/function_app_deploy.yml
                parameters:
                  appName: pins-func-appeals-bo-doc-processing-$(ENVIRONMENT)
                  resourceGroup: $(resourceGroup)
                  workingDirectory: $(Pipeline.Workspace)/build/function-appeals-document-processing
          - name: Deploy Function - Appeals Scheduled Jobs
            condition: eq(${{ parameters.deployFunctionAppealsScheduledJobs }}, 'true')
            steps:
              - download: build
                artifact: function-appeals-scheduled-jobs
                displayName: Download function-appeals-scheduled-jobs
              - template: ../steps/function_app_deploy.yml
                parameters:
                  appName: pins-func-appeals-bo-scheduled-jobs-$(ENVIRONMENT)
                  resourceGroup: $(resourceGroup)
                  workingDirectory: $(Pipeline.Workspace)/build/function-appeals-scheduled-jobs
          - name: Release Appeals API
            displayName: Slot swap on API Release
            condition: and(succeeded(), eq(${{ parameters.slotDeployment }}, true), eq(${{ parameters.deployAppealsAPI }}, true))
            dependsOn:
              - Deploy Appeals API
            steps:
              - template: ../steps/azure_web_app_slot_swap.yml
                parameters:
                  appName: pins-app-appeals-bo-api-$(ENVIRONMENT)
                  appResourceGroup: $(resourceGroup)
                  appStagingSlotName: staging
                  appTargetSlotName: production
          - name: Release Appeals Web
            displayName: Slot swap on Web Release
            condition: and(succeeded(), eq(${{ parameters.slotDeployment }}, true), eq(${{ parameters.deployAppealsWeb }}, true))
            dependsOn:
              - Deploy Appeals Web
            steps:
              - template: ../steps/azure_web_app_slot_swap.yml
                parameters:
                  appName: pins-app-appeals-bo-web-$(ENVIRONMENT)
                  appResourceGroup: $(resourceGroup)
                  appStagingSlotName: staging
                  appTargetSlotName: production
          - name: Release Appeals PDF
            displayName: Slot swap on PDF Release
            condition: and(succeeded(), eq(${{ parameters.slotDeployment }}, true), eq(${{ parameters.deployAppealsPDF }}, true))
            dependsOn:
              - Deploy Appeals PDF Generator
            steps:
              - template: ../steps/azure_web_app_slot_swap.yml
                parameters:
                  appName: pins-app-appeals-bo-pdf-$(ENVIRONMENT)
                  appResourceGroup: $(resourceGroup)
                  appStagingSlotName: staging
                  appTargetSlotName: production
    globalVariables:
      - template: azure-pipelines-variables.yml@self
